import 'ts-helpers';
import "./promiseHelpers";
export declare type NullableDispatch = Redux.Dispatch<any> | void;
export declare abstract class SyncAction implements Redux.Action {
    type: string;
}
export declare abstract class AsyncAction extends SyncAction implements Promise<NullableDispatch> {
    private promise;
    then(onfulfilled?: (value: Redux.Dispatch<any>) => NullableDispatch | PromiseLike<NullableDispatch>, onrejected?: (reason: any) => void): Promise<NullableDispatch>;
    catch(onrejected?: (reason: any) => NullableDispatch | PromiseLike<NullableDispatch>): Promise<NullableDispatch>;
    finally(onfulfilled?: (value?: NullableDispatch, isSuccess?: boolean) => any | PromiseLike<NullableDispatch>): Promise<NullableDispatch>;
}
